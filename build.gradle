buildscript {
	repositories {
		mavenCentral()
	}
	configurations.maybeCreate("pitest")
	dependencies {
		classpath('net.serenity-bdd:serenity-gradle-plugin:2.0.81')
		classpath('info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.5')
		pitest('org.pitest:pitest-junit5-plugin:0.8')
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'com.palantir.docker' version '0.22.1'
	id 'com.avast.gradle.docker-compose' version '0.9.5'
	id 'org.asciidoctor.convert' version '1.5.9.2'
	id 'io.franzbecker.gradle-lombok' version '3.2.0'
	id 'jacoco'
	id 'info.solidsoft.pitest' version '1.4.5'
	id 'com.github.hierynomus.license' version '0.15.0'
}
apply plugin: 'net.serenity-bdd.aggregator'

group = 'org.adhuc.cena'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 11

repositories {
	mavenCentral()
}

sourceSets {
	acceptance {
		java {
			compileClasspath += main.compileClasspath + test.compileClasspath + main.output + test.output
			runtimeClasspath += main.runtimeClasspath + test.runtimeClasspath + main.output + test.output
			srcDir file('src/acceptance/java')
		}
		resources.srcDir file('src/acceptance/resources')
	}
}

configurations {
	acceptanceTestCompile.extendsFrom testCompile
	acceptanceTestRuntime.extendsFrom testRuntime
}
gradle.startParameter.continueOnFailure = true

def springBootVersion = '2.2.0.RELEASE'
def springRestDocsVersion = '2.0.4.RELEASE'
def lombokVersion = '1.18.10'
def serenityVersion = '2.0.52'
def serenityCucumberVersion = '1.9.39'
def snippetsDir = file('build/generated-snippets')

dependencies {
	implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-hateoas')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-security')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testImplementation('org.junit.jupiter:junit-jupiter-params')
	testImplementation('org.junit.vintage:junit-vintage-engine')
	testImplementation('org.hamcrest:hamcrest')
	testImplementation('org.hamcrest:hamcrest-library')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
	acceptanceCompileOnly("org.projectlombok:lombok:${lombokVersion}")
	acceptanceAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	acceptanceImplementation("net.serenity-bdd:serenity-core:${serenityVersion}")
	acceptanceImplementation("net.serenity-bdd:serenity-junit:${serenityVersion}")
	acceptanceImplementation("net.serenity-bdd:serenity-rest-assured:${serenityVersion}")
	acceptanceImplementation("net.serenity-bdd:serenity-cucumber:${serenityCucumberVersion}")
	asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor:${springRestDocsVersion}")
}

configurations {
	implementation {
		exclude group: 'com.google.code.findbugs', module: 'jsr305'
		exclude group: 'org.apache.tomcat', module: 'tomcat-annotations-api'
	}
	testImplementation {
		exclude group: 'com.vaadin.external.google', module: 'android-json'
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
	}
}

lombok {
	version = "${lombokVersion}"
	sha256 = ""
}

license {
	header rootProject.file('.license')
	excludes(['**/*.feature', '**/*.yml', '**/*.snippet'])
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

pitest {
	testPlugin = 'junit5'
	targetClasses = ['org.adhuc.cena.menu.*']
	outputFormats = ['XML', 'HTML']
	excludedMethods = ['equals', 'hashCode', 'toString']
	timestampedReports = false
	mutationThreshold = 75
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

task acceptance(type: Test) {
	outputs.upToDateWhen { false }
	testClassesDirs = sourceSets.acceptance.output.classesDirs
	classpath = sourceSets.acceptance.runtimeClasspath
	doFirst { dockerCompose.exposeAsSystemProperties(acceptance) }
}
dockerCompose.isRequiredBy(acceptance)

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
	archiveFileName = "${rootProject.name}.jar"
}

bootRun {
	// support passing -Dsystem.property=value to bootRun task
	systemProperties = System.properties
}

docker {
	name "${rootProject.name}:latest"
	files tasks.bootJar.outputs
	copySpec.into("build")
}

dockerCompose {
	useComposeFiles = ['docker-compose.yml']
}
